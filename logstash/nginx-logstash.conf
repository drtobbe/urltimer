input {
  file {
    path => "/usr/local/openresty/nginx/logs/access.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}

filter {
  if [path] =~ "nginx" {
    mutate { replace => { "type" => "nginx_access" } }
    if [message] =~ /urltimer/ {
      drop {}  
    }
    else if [message] =~ /ping/ {
      drop {}  
    }
    else {
      grok {
        match => { "message" => "%{IPORHOST:clientip} - %{NOTSPACE:auth} \[%{HTTPDATE:httpdate}\] \"%{WORD:verb} %{URIPATH:request}(?:%{URIPARAM:params})? %{URIPROTO:proto}/%{NUMBER:protoversion}\" %{NUMBER:response:int} (?:%{NUMBER:bytes:int}|-) %{NUMBER:responsetime:float} %{NUMBER:timestamp} (?:%{NUMBER:upstream_responsetime:float}|-) \"%{GREEDYDATA:http_x_forwarded_for}\" \"%{GREEDYDATA:http_referer}\" \"%{GREEDYDATA:useragent}\"" }
      }
    }
    ruby {
      code => "event['responsetime_ms'] = (event['responsetime'].to_f * 1000.0).round.to_i"
    }
    date {
      match => [ "timestamp" , "UNIX" ]
    }
  }
}

output {
  #stdout { codec => rubydebug }
  if "_grokparsefailure" in [tags] { stdout { codec => rubydebug } }
  http {
     url => "http://localhost:8181/urltimer/jsonsink"
     http_method => "post"
  }
}

#   log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                     '$status $body_bytes_sent $request_time $msec $upstream_response_time '
#                     '"$http_x_forwarded_for" "$http_referer" "$http_user_agent"';
